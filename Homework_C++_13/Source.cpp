//
// Source.cpp
//
#include <iostream>
#include <Windows.h> // для Sleep()
#include <time.h>    // для time(), clock()
#include <conio.h>   // для _kbhit(), _getch()
#include "Win10.h"   // добавить заголовочный файл Win10.h
using namespace std;


/*
  Крестики-нолики
  0) Главное меню игры
  1) Игровое поле 3х3 типа char
  2) Перемещение по игровому полю
  3) Проверка есть ли победитель
  4) Игровой цикл
  5) Отрисовка игрового поля
  6) Инициализация игрового поля
*/

// Глобальная область

// Глобальные переменные для меню:
//  Координаты вывода главного меню: строка, столбец
int menuRow = 5, menuCol = 8;
//  Пременная для индекса активного пункта меню
int Select = 0;
//  Пременные для цвета пунктов меню - активного, неактивных, цвет по умолчанию
int cSelFon = _COLOR::purple;
int cSelSym = _COLOR::black;

int cUnSelFon = _COLOR::black;
int cUnSelSym = _COLOR::green;

// стандартный цвет консоли (0,7)
int cDefFon = black;    // _COLOR::black;
int cDefSym = white;    // _COLOR::white;

// Глобальные переменные для игры:
//  Координата верхнего-левого угла поля: строка, столбец
int gridRow = 4, gridCol = 10;

int countGame = 0; //количество игр
int winX = 0; // количество побед Х
int winY = 0; // количество побед У
int nichya = 0; // количество ничьих
bool isFirstX = true;
bool isWork = true; // сигнал о работе/завершения цикла меню

/*
Игровое поле XO
"+---+---+---+"
"|   |   |   |"
"+---+---+---+"
"|   |   |   |"
"+---+---+---+"
"|   |   |   |"
"+---+---+---+"
*/

// обявление и реализации ф-ции StartGameXO()
//  начать новую игру XO
void StartGameXO()
{ // начало ф-ции
  // тело ф-ции
    system("cls"); // очистка экрана
    // прорисовка игрового поля XO
    SetPos(gridRow + 0, gridCol); cout << "+---+---+---+";
    SetPos(gridRow + 1, gridCol); cout << "|   |   |   |";
    SetPos(gridRow + 2, gridCol); cout << "+---+---+---+";
    SetPos(gridRow + 3, gridCol); cout << "|   |   |   |";
    SetPos(gridRow + 4, gridCol); cout << "+---+---+---+";
    SetPos(gridRow + 5, gridCol); cout << "|   |   |   |";
    SetPos(gridRow + 6, gridCol); cout << "+---+---+---+";
    // показать курсор на экране
    CursorHide(TRUE, 25); // 10 - 10%, 25 - 25%
    // основной цикл игры - цикл игрового процесса
    bool GameOver = false; // переменная окончания игры
    int gRow, gCol; // текущие координаты курсора в сетке
    gRow = gridRow + 1;
    gCol = gridCol + 2;
    int row = 0, col = 0; // текущая позиция ячейки на сетке игры
    //bool isTurnX = true; // true - первыми ходят крестики
    //  Двумерный массив 3x3 для хранения информации об ячейках игрового поля
    int cell[3][3] = { 0 }; // заполнение массива нулями

    int Win = 0;  // переменная для победы, 0 - ни кто еще не победил
                  // 1 - победили X
                  // 2 - победили O
    int cntStep = 0; // счетчик ходов
    // цикл игры
    bool isTurnX = isFirstX;
    while (!GameOver) //while (GameOver == false)
    {
        SetPos(13, 10); // курсор в текущую позицию
        cout << "Сейчас ходят: " << (isTurnX ? 'X' : 'O');
        SetPos(gRow, gCol); // курсор в текущую позицию

        // ожидание нажатия клавиш пользователем
        int key = _getch();
        //
        switch (key)
        {
        case _KEY::UP: // вверх
            if (row > 0) {
                gRow -= 2; // перемещение курсора вверх
                row--;
            }
            break;
        case _KEY::DOWN: // вниз
            if (row < 2) {
                gRow += 2; // перемещение курсора вниз
                row++;
            }
            break;
        case _KEY::LEFT: // влево
            if (col > 0) {
                gCol -= 4; // перемещение курсора влево
                col--;
            }
            break;
        case _KEY::RIGHT: // вправо
            if (col < 2) {
                gCol += 4;
                col++;
            }
            break;

        case _KEY::ENTER: case _KEY::SPACE: // ход игрока
          // проверка ячейки на занятость
            if (cell[row][col] != 0) { break; } // выходим, если ячейка занята
            cntStep++; // подсчет ходов
            // ячейка свободна: cell[row][col] == 0
            if (isTurnX == true) { // ход крестиков
                cout << "X";
                cell[row][col] = 1; // запоминаем X в ячейке (row,col)
                //isTurnX = false; //isTurnX = !true;
            }
            else {
                cout << "O";
                cell[row][col] = 2; // запоминаем X в ячейке (row,col)
                //isTurnX = true;
            }
            isTurnX = !isTurnX; // передача хода
            // проверка на победу
            // по горизонтали
            if (cell[0][0] != 0 && // по строке [0]
                cell[0][0] == cell[0][1] && cell[0][0] == cell[0][2])
            {
                Win = cell[0][0]; // кто-то победил
            }
            else if (cell[1][0] != 0 && // по строке [1]
                cell[1][0] == cell[1][1] && cell[1][0] == cell[1][2])
            {
                Win = cell[1][0]; // кто-то победил
            }
            else if (cell[2][0] != 0 && // по строке [2]
                cell[2][0] == cell[2][1] && cell[2][0] == cell[2][2])
            {
                Win = cell[2][0]; // кто-то победил
            }
            // по вертикали
            if (cell[0][0] != 0 && // по столбцу [0]
                cell[0][0] == cell[1][0] && cell[0][0] == cell[2][0])
            {
                Win = cell[0][0];
            }
            else if (cell[0][1] != 0 && // по столбцу [1]
                cell[0][1] == cell[1][1] && cell[0][1] == cell[2][1])
            {
                Win = cell[0][1];
            }
            else if (cell[0][2] != 0 && // по столбцу [2]
                cell[0][2] == cell[1][2] && cell[0][2] == cell[2][2])
            {
                Win = cell[0][2];
            }
            // по диагонали
            if (cell[0][0] != 0 &&
                cell[0][0] == cell[1][1] && cell[0][0] == cell[2][2])
            {
                Win = cell[0][0];
            }
            else if (cell[0][2] != 0 &&
                cell[0][2] == cell[1][1] && cell[0][2] == cell[2][0])
            {
                Win = cell[0][2];
            }
            // расшифровка победы

            if (Win != 0) { // кто-то победил
                SetPos(gridRow + 7 + 1, gridCol + 2);
                //if (Win == 1) { cout << "Победили X!" << endl; }
                //else          { cout << "Победили O!" << endl; }
                countGame++;
                if (Win == 1) { winX++;  cout << "Победили " << "X" << "!\n"; }
                else { winY++;  cout << "Победили " << "O" << "!\n"; }
                GameOver = true;
                //SetPos(gridRow + 7 + 2, gridCol + 2);
                //system("pause"); // пауза с паразитным выводом
                system("pause > nul"); // пауза без паразитного вывода
                system("cls"); // очистить экран
            }
            else if (cntStep == 9) {
                SetPos(gridRow + 7 + 1, gridCol + 2);
                cout << "Ничья!";
                countGame++;
                nichya++; // считаем количество ничьих
                GameOver = true;
                system("pause > nul"); // пауза без паразитного вывода
                system("cls"); // очистить экран
            }
            break;

        case ESC: // выход из игры в основное меню

            SetPos(menuRow + 10, menuCol);
            cout << "Выйти из текущей игры в главное меню (y/n)? ";
            char ynKey;
            do {
                ynKey = _getch();
            } while (ynKey != 'y' && ynKey != 'Y' && ynKey != 'n' && ynKey != 'N' && ynKey != ESC);
            while (_kbhit()) { _getch(); } // очистить клавиатурный буфер
            if (ynKey == ESC) ynKey = 'N';
            cout << ynKey;
            Sleep(150);
            if (ynKey == 'y' || ynKey == 'Y') { system("cls"); return; } /*выход из ф-ции игры в главное меню*/
            // продолжаем игру
            SetPos(menuRow + 10, menuCol);
            cout << "";
            break;
        } // switch(key)
    } // while(!GameOver)
} // конец ф-ции StartGameXO()

void Exit() {
    SetPos(menuRow + 10, menuCol);
    cout << "Вы действительно хотите выйти из игры (y/n)? ";
    char ynKey;
    do {
        ynKey = _getch();
    } while (ynKey != 'y' && ynKey != 'Y' && ynKey != 'n' && ynKey != 'N' && ynKey != ESC);
    while (_kbhit()) { _getch(); } // очистить клавиатурный буфер
    if (ynKey == ESC) ynKey = 'N';
    cout << ynKey;
    Sleep(150);

    if (ynKey == 'n' || ynKey == 'N') { system("cls"); return; }
    isWork = false;
    // продолжаем игру
   /*выход из игры*/
    SetPos(menuRow + 10, menuCol);
    cout << "";
    //isWork = false;
    //break;
}
// ф-ция для настроек параметров игры
void Settings()
{
    system("cls");
    SetPos(1, 2);
    cout << "Выберите кто первый будет ходить (X или O): ";
    int key;
    do {
        key = _getch();
    } while (key != 'o' && key != 'O' && key != 'x' && key != 'X');
    while (_kbhit()) { _getch(); } // очистить клавиатурный буфер
    cout << (char)key;
    isFirstX = (key == 'x' || key == 'X') ? true : false;
    SetPos(2, 2);
    system("pause");
    system("cls");
}
// ф-ция для вывода статистики на экран
void StatGame()
{
    system("cls"); // команда очистки экрана cls - Clear Screen
    SetPos(3, 5);
    cout << "Всего сыграно игр: " << countGame << "\n";
    SetPos(4, 5);
    cout << "Победили X: " << winX << " раз\n";
    SetPos(5, 5);
    cout << "Победили Y: " << winY << " раз\n";
    SetPos(6, 5);
    cout << "Сыгранно вничью: " << nichya << " раз\n";
    system("pause > nul"); // пауза в консоли программы без паразитного вывода
    system("cls"); // очистка экрана перед возвращением в меню
}
// ф-ция вывода информ. об авторах и игре
void About()
{ // начало ф-ции
    system("cls"); // команда очистки экрана cls - Clear Screen
    SetPos(3, 5);
    cout << "Игра \"Крестики-Нолики\"";
    SetPos(4, 5);
    cout << "Автор: группа SEP-211/1";
    SetPos(6, 5);
    //system("pause"); // пауза в консоли программы с выводом "Для продолжения нажмите любую клавишу"
    system("pause > nul"); // пауза в консоли программы без паразитного вывода
    system("cls"); // очистка экрана перед возвращением в меню
} // конец ф-ции

// ф-ция main()
int main() {
    setlocale(LC_ALL, "Rus");

    // Вывод приветствия - приглашение к игре (пролог)

    // Бесконечный цикл для главного меню игры
    // В цикле:
    //   печать, вывод пунктов меню (Начать игру, Настройки, Об авторах, и т.д.);
    //   обработка нажатия клавиш:
    //    если пользователь нажал на кнопку - узнать на какую кнопку нажал пользователь
    //    среагировать на нажатие кнопок ESC, ENTER, UP/DOWN/LEFT/RIGHT
    //system("color 2A"); // команда изменения цвета всей консоли
    while (isWork == true)
    {
        CursorHide(); // скрыть курсор экрана

        // Вывод пунктов меню
        SetPos(menuRow + 0, menuCol);
        if (Select == 0) { SetColor(cSelFon, cSelSym); }
        else { SetColor(cUnSelFon, cUnSelSym); }
        cout << "Начать новую игру";

        SetPos(menuRow + 1, menuCol);
        if (Select == 1) { SetColor(cSelFon, cSelSym); }
        else { SetColor(cUnSelFon, cUnSelSym); }
        cout << "Настройки";

        SetPos(menuRow + 2, menuCol);
        if (Select == 2) { SetColor(cSelFon, cSelSym); }
        else { SetColor(cUnSelFon, cUnSelSym); }
        cout << "Статистика игры";

        SetPos(menuRow + 3, menuCol);
        if (Select == 3) { SetColor(cSelFon, cSelSym); }
        else { SetColor(cUnSelFon, cUnSelSym); }
        cout << "Об авторах";

        SetPos(menuRow + 4, menuCol);
        if (Select == 4) { SetColor(cSelFon, cSelSym); }
        else { SetColor(cUnSelFon, cUnSelSym); }
        cout << "Выход";

        // восстанвливаем цвет консоли по умолчанию
        SetColor(cDefFon, cDefSym); // (0, 7)

        // обработка нажатий клавиш
        //if ( _kbhit() )//if ( _kbhit() != 0 )
        { // было нажатие клавиши на клавиатуре
          // получить код нажатой кнопки
            int key = _getch();
            // обработка кода нажатой клавиши
            switch (key)
            {
            case _KEY::UP:    // кнопка вверх
            case 'w': case 'W': case _KEY::LEFT:
                if (Select > 0) { Select--; }
                else { Select = 4; } // вкруговую
                break;
            case _KEY::DOWN:  // кнопка вниз
            case 's': case 'S': case _KEY::RIGHT:
                if (Select < 4) { Select++; }
                else { Select = 0; } // вкруговую
                break;
            case _KEY::ENTER: // Выбор пункта меню
              //SetPos(menuRow + 5 + 2, menuCol);
              //cout << "Был выбран " << Select + 1
              //  << " пункт меню";
              // Обработка команд меню - диспетчеризация Select-та
                switch (Select)
                {
                case 0: // Начать новую игру
                    StartGameXO(); // вызов ф-ции начала игры StartGameXO()
                    break;
                case 1: // Настройки
                    Settings(); // вызов ф-ции для настроек игры
                    break;
                case 2: // Статистика
                    StatGame(); // вызов ф-ции для отображения статистики игр
                    break;
                case 3: // Об авторах
                    About(); // вызов ф-ции About() - вывод информации
                             //  об авторе программы
                    break;
                case 4: // Выход
                    Exit();
                    break;
                }
                break;
            case _KEY::ESC:         // _KEY::ESC:
              // выход из меню
                Exit();
                // isWork = false;
                break;
            } // switch(key);
        } // if(_kbhit())
    } // while( isWork == true )

    // Вывод о завершении работы программы (эпилог)
    system("cls");
    // SetPos(2, 2); // координата верхнего левого угла окна консоли
    cout << "Good bye...";
    // cin.get(); cin.get(); // блокирующие консоль ф-ции 
} // main()
